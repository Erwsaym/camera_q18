set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/../bin/static)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/../bin/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/../bin)

if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
	set(SPYKE_OS_LINUX 1)
	add_definitions(-DSPYKE_OS="Linux")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	set(SPYKE_OS_WINDOWS 1)
	add_definitions(-DSPYKE_OS="Windows")
elseif(UNIX AND APPLE)
	set(SPYKE_OS_MACOSX 1)
	add_definitions(-DSPYKE_OS="MacOSX")
endif()

macro(init_project project)
	project(${project})
	set(SRCS "")
	add_definitions(-DSPYKE_SOFTWARE="${PROJECT_NAME}")
endmacro()

macro(add_src_directory directory)
	set(FILES)
	file(GLOB FILES ${directory}/*.cpp ${directory}/*.c)# ${directory}/*.hpp ${directory}/*.h)
	set(SRCS "${SRCS};${FILES}")
endmacro()

macro(add_src filename)
	set(SRCS "${SRCS};${filename}")
endmacro()

macro(project_as_library)
	add_library(${PROJECT_NAME} STATIC ${SRCS})
	include_directories(src)
	target_include_directories(${PROJECT_NAME} PUBLIC include)
endmacro()

macro(project_as_executable)
	add_executable(${PROJECT_NAME} ${SRCS})
	include_directories(src)
endmacro()